bool isCycleBFS(int node,vector<bool>& vis,
unordered_map<int,set<int>>& adj)
{
    vector<int>parent;
    queue<int>q;
    q.push(node);
    vis[node]=1;
    parent[node]=-1;
    while(!q.empty())
    {
        int front=q.front();
        q.pop();
        for(auto i:adj[front])
        {
           if(vis[i]==1 && i!=parent[front])
           {
               return true;
           }
           else[
               q.push(i);
               vis[i]=1;
               parent[i]=front;
           ]
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int,set<int>>adj;
    for(int i=0;i<m;i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].insert(v);
        adj[v].insert(u);
    }
    vector<bool>vis(n, false);

    for(int i=0;i<n;i++){
         if(!vis[i]){
             bool cycle=isCycleBFS(i,vis,adj);
             if(cycle){
                 return "Yes";
             }
         } 
    }
    return "No";
}
