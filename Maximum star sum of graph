class Solution {
public:
    int dfs(int node, vector<vector<int>>& adj, vector<int>& visited,
            vector<int>& vals, int k) {
        priority_queue<int> pq;
        int res = INT_MIN;
        visited[node] = 1;
        for (int i : adj[node]) {
            if (vals[i] > 0) {
                pq.push(vals[i]);
            }
            if (visited[i] == 0) {
                res = max(res, dfs(i, adj, visited, vals, k));
            }
        }

        int sum = vals[node];
        while (pq.size() > 0 && k > 0) {
            sum += pq.top();
            pq.pop();
            k--;
        }
        return max(res, sum);
    }
    int maxStarSum(vector<int>& vals, vector<vector<int>>& edges, int k) {
        int n = vals.size();
        vector<vector<int>> adj(n);
        for (auto e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }

        int ans = INT_MIN;
        vector<int> visited(n, 0);
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0) {
                ans = max(ans, dfs(i, adj, visited, vals, k));
            }
        }
        return ans;
    }
};
