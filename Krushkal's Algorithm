#include<algorithm>
bool weight(vector<int>edges1,vector<int>edges2){
  return edges1[2]<edges2[2];
}
int findSet(vector<int>& parent,int node){
  if(parent[node]==node){
    return node;
  }
  return parent[node]=findSet(parent,parent[node]);
}
void unionSet(vector<int>& parent,vector<int>& rank,int set1,int set2){
  set1=findSet(parent,set1);
  set2=findSet(parent,set2);
  if(set1!=set2)
  {
    if(rank[set1]<rank[set2]){
      swap(set1,set2);
    }
    parent[set2]=set1;
    if(rank[set1]==rank[set2]){
      rank[set1]++;
    }
  }
}
int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
  sort(edges.begin(),edges.end(),weight);
  vector<int>parent(n);
  vector<int>rank(n);

  for(int i=0;i<n;i++){
     parent[i]=i;
     rank[i]=0;
  }

  int finalWeight=0;

  for(int i=0;i<edges.size();i++){
     int set1=findSet(parent,edges[i][0]);
     int set2=findSet(parent,edges[i][1]);
     if(set1!=set2){
        finalWeight+=edges[i][2];
        unionSet(parent,rank,set1,set2);
     }
  }
  return finalWeight;
}


#include<algorithm>
bool cmp(vector<int>&a,vector<int>&b)
{
  return a[2]<b[2];
}
int findParent(vector<int>& parent,int node)
{
  if(parent[node]==node)
  {
    return node;
  }
  //int s;
   return parent[node]=findParent(parent,parent[node]);
}
void unionSet(int u,int v,vector<int>&parent,vector<int>&rank)
{
  u=findParent(parent, u);
  v=findParent(parent, v);
  if(rank[u] < rank[v])
  {
    parent[u]=v;
  }
  else if(rank[u]>rank[v])
  {
    parent[v]=u;
  }
  else{
    parent[v]=u;
    rank[u]++;
  }

}

void makeSet(vector<int>& parent ,vector<int>& rank,int n)
{
  for(int i=0;i<n;i++)
  {
    parent[i]=i;
    rank[i]=0;
  }
}
int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
  sort(edges.begin(),edges.end(),cmp);
  
  vector<int>parent(n);
  vector<int>rank(n);
  makeSet(parent,rank,n);
  
  int minwt=0;
  for(int i=0;i<edges.size();i++)
  {
    int u=findParent(parent,edges[i][0]);
    int v=findParent(parent,edges[i][1]);
    int wt=edges[i][2];
    if(u!=v)
    {
      minwt+=wt;
      unionSet(u,v,parent,rank);
    }
  }
  return minwt;
}
