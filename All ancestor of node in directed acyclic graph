class Solution {
public:
    void dfs(unordered_map<int, set<int>>& adj, int node, vector<int>& a,
             vector<int>& visited) {

        for (auto i : adj[node]) {
            if (!visited[i]) {
                visited[i] = true;
                a.push_back(i);
                dfs(adj, i, a, visited);
            }
        }
    }
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> ans;
        int e = edges.size();
        unordered_map<int, set<int>> adj;
        for (int i = 0; i < e; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            adj[v].insert(u);
        }

        for (int i = 0; i < n; i++) {
            vector<int> a;
            vector<int> visited(n, false);
            visited[i]=true;
            dfs(adj, i, a, visited);
            sort(a.begin(),a.end());
            ans.push_back(a);
        }
        return ans;
    }
};
