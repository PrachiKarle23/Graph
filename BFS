#include <bits/stdc++.h> 
void prepareList(unordered_map<int,set<int>>&adj,
 vector<pair<int, int>>&edges)
 {
     for(int i=0;i<edges.size();i++)
     {
         int u=edges[i].first;
         int v=edges[i].second;
         adj[u].insert(v);
         adj[v].insert(u);
     }
 }
 void bfs(int node,unordered_map<int,set<int>>&adj,vector<int>&ans,
 unordered_map<int,bool>&visited)
 {
     queue<int>q;
     q.push(node);
     visited[node]=1;
     while(!q.empty())
     {
         int front=q.front();
         q.pop();
         
         ans.push_back(front);
         for(auto i: adj[front])
         {
             if(!visited[i])
             {
                 q.push(i);
                 visited[i]=1;
             }
         }
     }
 }
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map<int,set<int>>adj;
    vector<int>ans;
    prepareList(adj,edges);
    unordered_map<int,bool>visited;
    for(int i=0;i<vertex;i++)
    {
        if(!visited[i])
        {
            bfs(i,adj,ans,visited);
        }
    }
    return ans;
}
