class Solution {
public:
    void dfs(unordered_map<int,set<int>>& adj,vector<bool>&visited,int node)
    {
        visited[node]=true;
        for(auto i:adj[node])
        {
            if(!visited[i]){
                dfs(adj,visited,i);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        unordered_map<int,set<int>>adj;
        int m=connections.size();
        if(!(m>=n-1)){
          return -1;
        }
        for(int i=0;i<m;i++)
        {
            int u=connections[i][0];
            int v=connections[i][1];
            adj[u].insert(v);
            adj[v].insert(u);
        }

        vector<bool>visited(n,false);
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            if(!visited[i])
            {
                cnt++;
                dfs(adj,visited,i);
            }
        }
        
        return cnt-1;
    }
};
