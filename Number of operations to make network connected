class Solution {
public:
    void dfs(unordered_map<int, set<int>>& adj, int node,
             vector<bool>& visited) {
        
        visited[node] = true;
        for (auto i : adj[node]) {
            if (!visited[i]) {
                dfs(adj, i, visited);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        unordered_map<int, set<int>> adj;
        for (int i = 0; i < connections.size(); i++) {
            int u = connections[i][0];
            int v = connections[i][1];

            adj[u].insert(v);
            adj[v].insert(u);
        }

        vector<bool> visited(n, false);
        int cnt = 0;

        if (connections.size() >= n - 1) {
            for (int i = 0; i < n; i++) {
                if (!visited[i]) {
                    cnt++;
                    dfs(adj, i, visited);
                }
            }
        }

        return cnt - 1;
    }
};
