class Solution {
public:
    bool bfs(int node,unordered_map<int,bool>visited,unordered_map<int,set<int>>adj, int destination)
    {
        queue<int>q;
        q.push(node);
        visited[node]=true;
        while(!q.empty())
        {
            int front=q.front();
            q.pop();
            if(front==destination)
            {
                return true;
            }
            for(auto i:adj[front])
            {
                if(!visited[i])
                {
                    q.push(i);
                    visited[i]=true;
                }
            }
        }
        return  false;
    }
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        if(n==1){
            return true;
        }
        unordered_map<int,set<int>>adj;
        int e=edges.size();
        for(int i=0;i<e;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adj[u].insert(v);
            adj[v].insert(u);
        }
         unordered_map<int,bool>visited;
         if(!visited[source])
         {
            return bfs(source,visited,adj,destination);
         }
         return false;
    }
};
