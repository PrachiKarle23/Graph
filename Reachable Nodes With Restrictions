class Solution {
public:
   
    void dfs(int node,unordered_map<int,set<int>>& adj,vector<bool>& visited,int &cnt)
    {
         visited[node]=true;
         cnt++;
         for(auto i:adj[node])
         {
             if(!visited[i])
             {
                dfs(i,adj,visited,cnt);
             }
         }
    }
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        unordered_map<int,set<int>>adj;
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].insert(edges[i][1]);
            adj[edges[i][1]].insert(edges[i][0]);
        }

        vector<bool>visited(n,false);
        for(int i=0;i<restricted.size();i++)
        {
            visited[restricted[i]]=true;
        }
        int cnt=0;
        dfs(0,adj,visited,cnt);
       
        return cnt;
    }
};
