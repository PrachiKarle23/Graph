class Solution {
public:
    unordered_map<int,set<pair<int,int>>>adj;
    vector<pair<int,int>>ans;
    void solve(int node,int n,int distanceThreshold)
    {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,node});
        vector<int>dist(n+1,INT_MAX);
        while(!pq.empty())
        {
            int node=pq.top().second;
            int nodeDist=pq.top().first;
            pq.pop();
            for(auto i:adj[node])
            {
                if(i.second+nodeDist<dist[i.first])
                {
                    dist[i.first]=i.second+nodeDist;
                    pq.push({dist[i.first],i.first});
                }
            }
        }
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            if(dist[i]<=distanceThreshold && i!=node)
            {
                cnt++;
            }
        }
        ans.push_back({cnt,node});
    }
    static bool cmp(pair<int,int>& p1,pair<int,int>& p2)
    {
      if(p1.first!=p2.first)
      {
        return p1.first<p2.first;
      }
      return p1.second>p2.second;
    }
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        
        for(int i=0;i<edges.size();i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int w=edges[i][2];
            adj[u].insert({v,w});
            adj[v].insert({u,w});
        }

        for(int i=0;i<n;i++)
        {
            solve(i,n,distanceThreshold);
        }
        sort(ans.begin(),ans.end(),cmp);
        return ans[0].second;
    }
};
