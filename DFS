void dfs(int node,unordered_map<int,set<int>>& adj,
unordered_map<int,bool>vis,vector<int>& ans){

    ans.push_back(node);
    vis[node]=1;
    
    for(auto i: adj[node]){
        if(!vis[i]){
            dfs(i,adj,vis,ans);
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E,
 vector<vector<int>> &edges)
{
    unordered_map<int,set<int>>adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].insert(v);
        adj[v].insert(u);
    }
    
    vector<int>ans;
    unordered_map<int,bool>vis;
    dfs(0,adj,vis,ans);
    for(int i=0;i<ans.size();i++){
        cout<<ans[i]<<" ";
    }
    cout<<endl;
}
