//failed in two test cases
class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        if(n==1){
            return 1;
        }
        int s=trust.size();

        unordered_map<int,set<int>>adj;

        for(int i=0;i<s;i++)
        {
            int u=trust[i][0];
            int v=trust[i][1];

            adj[u].insert(v);
        }
        unordered_map<int,int>mp;
        for(auto i:adj)
        {
            for(auto j:i.second)
            {
                mp[j]++;
            }
        }

        for(auto i:mp){
            if(i.second==adj.size()){
                return i.first;
            }
        }
        return -1;
    }
};

//accepted
class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        vector<int>Trusted(n+1,0);

        for(auto person:trust)
        {
            Trusted[person[0]]--;
            Trusted[person[1]]++;
        }

        for(int i=1;i<=n;i++)
        {
            if(Trusted[i]==n-1)
            {
                  return i;
            }
        }
        return -1;
    }
};
