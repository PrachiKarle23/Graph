class Solution {
public:
    void dfs(int node,unordered_map<int,set<int>>& adj,vector<bool>& visited)
    {
        visited[node]=true;
        for(auto i:adj[node])
        {
            if(!visited[i])
            {
                dfs(i,adj,visited);
            }
        }
    }
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        unordered_map<int,set<int>>adj;
        int n=rooms.size();

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<rooms[i].size();j++)
            {
                adj[i].insert(rooms[i][j]);
            }
        }

        int cnt=0;
        vector<bool>visited(n,false);
        for(int i=0;i<n;i++)
        {
           if(!visited[i])
           {
              cnt++;
              dfs(i,adj,visited);
           }
        }
        if(cnt>1)
        {
            return false;
        }
        return true;
    }
};
