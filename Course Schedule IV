class Solution {
public:
    void dfs(unordered_map<int,set<int>>& adj,int u,int v,vector<bool>& vis,bool &ans)
    {
        if(u==v){
            ans=true;
            return;
        }
       vis[u]=true;
       for(auto i:adj[u])
       {
          if(!vis[i])
          {
              dfs(adj,i,v,vis,ans);
          }
       }
    }
    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites,
     vector<vector<int>>& queries) {
          
          unordered_map<int,set<int>>adj;
          int m=prerequisites.size();
          for(int i=0;i<m;i++)
          {
            int u=prerequisites[i][0];
            int v=prerequisites[i][1];
            adj[u].insert(v);
          }

          int n=queries.size();
          vector<bool>res(n,false);
        
          for(int i=0;i<n;i++)
          {
             vector<bool>vis(numCourses,false);
             int u=queries[i][0];
             int v=queries[i][1];
             if(!vis[u])
             {
               bool ans=false;
               dfs(adj,u,v,vis,ans);
               res[i]=ans;
             }
          }
          return res;
    }
};
