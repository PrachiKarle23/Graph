#include<algorithm>
#include<vector>
#include<list>
#include<unordered_map>

void dfs(int node,unordered_map<int,bool>&visited,vector<int>&low,
vector<int>&disc,int parent,unordered_map<int,list<int>>&adj,
vector<vector<int>>&result,int &timer)
{
    visited[node]=true;
    disc[node]=low[node]=timer++;
    for(auto nbr:adj[node])
    {
        if(nbr==parent)
        {
            continue;
        }
        if(!visited[nbr])
        {
            dfs(nbr,visited,low,disc,node,adj,result,timer);
            low[node]=min(low[node],low[nbr]);
            if(low[nbr]>disc[node])
            {
               vector<int>ans;
               ans.push_back(node);
               ans.push_back(nbr);
               result.push_back(ans);
            }
        }
        else{
            low[node]=min(low[node],disc[nbr]);
        }
    }
}
vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e) {
    unordered_map<int,list<int>>adj;
    for(int i=0;i<e;i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
     vector<vector<int>>result;
    int timer=0;
    vector<int>disc(v);
    int parent=-1;
    vector<int>low(v);
    for(int i=0;i<v;i++)
    {
        disc[i]=-1;
        low[i]=-1;
    }
    unordered_map<int,bool>visited;
    for(int i=0;i<v;i++)
    {
        if(!visited[i])
        {
            dfs(i,visited,low,disc,parent,adj,result,timer);
        }
    }
    return result;
}
