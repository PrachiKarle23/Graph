#include<unordered_map>
#include<set>
bool isCycleDFS(int node,int parent,vector<bool>& vis,
unordered_map<int,set<int>>& adj)
{
    vis[node]=1;
    for(auto i:adj[node])
    {
        if(!vis[i]){
          bool ans=isCycleDFS(i,node,vis,adj);
          if(ans==1){
              return true;
          }
        }
        else if(i!=parent){
            return true;
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int,set<int>>adj;
    for(int i=0;i<m;i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].insert(v);
        adj[v].insert(u);
    }
    vector<bool>vis(n, false);

    for(int i=0;i<n;i++){
         if(!vis[i]){
             bool cycle=isCycleDFS(i,-1,vis,adj);
             if(cycle){
                 return "Yes";
             }
         } 
    }
    return "No";
}
