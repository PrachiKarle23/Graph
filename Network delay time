class Solution {
public:
    unordered_map<int,set<pair<int,int>>>adj;
    
    void solve(int src,int n, vector<int>& dist)
    {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        dist[src]=0;
        pq.push(make_pair(0,src));
        vector<bool>vis(n,false);
        vis[src]=true;
        while(!pq.empty())
        {
            int node=pq.top().second;
            int nodeDist=pq.top().first;
            pq.pop();
            
            for(auto i:adj[node])
            {
                 if(vis[i.first]==false && i.second+nodeDist<dist[i.first] )
                 {
                    dist[i.first]=i.second+nodeDist;
                    pq.push({dist[i.first],i.first});
                 }
            }
        }
    }
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
      
        int m=times.size();
        for(int i=0;i<m;i++)
        {
            int u=times[i][0];
            int v=times[i][1];
            int w=times[i][2];

            adj[u].insert(make_pair(v,w));
        }
        vector<int>dist(n+1,1e9);
        solve(k,n,dist);
       
        int ans=0;
        for(int i=1;i<dist.size();i++)
        {
            ans=max(ans,dist[i]);
        }
        return ans==1e9 ? -1 : ans;
    }
};
